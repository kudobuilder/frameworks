apiVersion: kudo.k8s.io/v1alpha1
kind: OperatorVersion
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: redis-0.1.0
  namespace: default
spec:
  serviceSpec:
  version: "0.1.0"
  connectionString: ""
  operator:
    name: redis
    kind: Operator
  parameters:
    - name: INSTANCES
      description: "Number of redis instances"
      default: "3"
      displayName: "Redis instances"
    - name: CLIENT_PORT
      description: "Client port"
      default: "6379"
    - name: GOSSIP_PORT
      description: "Gossip port"
      default: "16379"
  tasks:
    deploy:
      resources:
        - service.yaml
        - pdb.yaml
        - configmap.yaml
        - statefulset.yaml
    init:
      resources:
        - init.yaml
  templates:
    service.yaml: |
      apiVersion: v1
      kind: Service
      metadata:
        name: svc
      spec:
        type: ClusterIP
        ports:
        - port: {{ .Params.CLIENT_PORT }}
          targetPort: {{ .Params.CLIENT_PORT }}
          name: client
        - port: {{ .Params.GOSSIP_PORT }}
          targetPort: {{ .Params.GOSSIP_PORT }}
          name: gossip
        selector:
          app: redis
          instance: {{ .Name }}
    pdb.yaml: |
      apiVersion: policy/v1beta1
      kind: PodDisruptionBudget
      metadata:
        name: pdb
      spec:
        selector:
          matchLabels:
            app: redis
            instance: {{ .Name }}
        minAvailable: 2
    configmap.yaml: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: redis
      data:
        update-node.sh: |
          #!/bin/sh
          REDIS_NODES="/data/nodes.conf"
          sed -i -e "/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/${POD_IP}/" ${REDIS_NODES}
          exec "$@"
        redis.conf: |+
          cluster-enabled yes
          cluster-require-full-coverage no
          cluster-node-timeout 15000
          cluster-config-file /data/nodes.conf
          cluster-migration-barrier 1
          appendonly yes
          protected-mode no
    statefulset.yaml: |
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: {{ .OperatorName }}
        namespace: {{ .Namespace }}
        labels:
          redis: {{ .OperatorName }}
          app: redis
      spec:
        serviceName: {{ .Name }}-svc
        replicas: {{ .Params.INSTANCES }}
        selector:
          matchLabels:
            app: redis
            redis: {{ .OperatorName }}
        template:
          metadata:
            labels:
              app: redis
              redis: {{ .OperatorName }}
          spec:
            containers:
            - name: redis
              image: redis:5.0.1-alpine
              ports:
              - containerPort: {{ .Params.CLIENT_PORT }}
                name: client
              - containerPort: {{ .Params.GOSSIP_PORT }}
                name: gossip
              command: ["/conf/update-node.sh", "redis-server", "/conf/redis.conf"]
              env:
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP
              volumeMounts:
              - name: conf
                mountPath: /conf
                readOnly: false
              - name: data
                mountPath: /data
                readOnly: false
            volumes:
            - name: conf
              configMap:
                name: {{ .Name }}-redis
                defaultMode: 0755
        volumeClaimTemplates:
        - metadata:
            name: data
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 1Gi
    init.yaml: |
      apiVersion: batch/v1
      kind: Job
      metadata:
        namespace: default
        name: {{ .PlanName }}-job
      spec:
        template:
          metadata:
            name: {{ .PlanName }}-job
          spec:
            restartPolicy: OnFailure
            containers:
            - name: {{ .PlanName }}
              image: redis:5.0.1-alpine
              imagePullPolicy: IfNotPresent
              command:
              - /bin/sh
              - -c
              - 'echo yes | redis-cli -x -h rediscluster1-redis-0.rediscluster1-svc.default.svc.cluster.local --cluster create --cluster-replicas 1 $(i=0; while [ $i -le 5 ]; do printf $(nslookup rediscluster1-redis-${i}.rediscluster1-svc.default.svc.cluster.local  | grep "Address" |  awk "{ print \$3 }")":6379 "; i=$((i+1)); done)'
  plans:
    deploy:
      strategy: serial
      phases:
        - name: deploy-redis
          strategy: serial
          steps:
            - name: deploy
              tasks:
                - deploy
            - name: init
              tasks:
                - init